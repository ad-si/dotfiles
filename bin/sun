#! /usr/bin/env bun

const SunCalc = require("suncalc")

const now = new Date()
const nowTimeString = now.toISOString().slice(-13, -8)
const locations = [
  {
    name: "Frankfurt am Main",
    coord: [52.397, 13.077]
  },
  {
    name: "Johannesburg",
    coord: [-26, 28]
  },
]

function getTime(date) {
  return date.toISOString().slice(-13, -8)
}

let text = ""

locations.forEach(location => {
  text += `Location: ${location.name}\n`

  const sunData = SunCalc.getTimes(now, location.coord[0], location.coord[1])

  const daytimeDuration = sunData.sunset - sunData.sunrise
  const daytimeDuration24 = new Date(daytimeDuration).toISOString().slice(-13, -8)
  const passedDaytime = now - sunData.sunrise
  const percentageOfDaytime = Math.trunc((passedDaytime / daytimeDuration) * 100)

  const entries = [
    {
      type: "sunrise",
      time: getTime(sunData.sunrise),
      icon: "ðŸŒ…",
    },
    {
      type: "solarNoon",
      time: getTime(sunData.solarNoon),
      icon: "ðŸŒž",
    },
    {
      type: "sunset",
      time: getTime(sunData.sunset),
      icon: "ðŸŒ‡",
    },
    {
      type: "nadir",
      time: getTime(sunData.nadir),
      icon: "ðŸŒ‘",
    },
    {
      type: "current",
      time:
        nowTimeString +
        ` (${percentageOfDaytime}% of ${daytimeDuration24} h daytime)`,
      icon: "ðŸ•“",
    },
  ]

  text += entries
    .sort((entryA, entryB) => entryA.time.localeCompare(entryB.time))
    .map((entry) => entry.icon + "   " + entry.time)
    .join("\n")

  text += "\n\n"
})

process.stdout.write(text + "\n")
