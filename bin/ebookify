#!/usr/bin/env bash

# Alternative: https://github.com/danburzo/percollate

if test $# = 0
then
  echo "Usage: $(basename "$0") <renderer> <url / path to document>"
  exit 1
fi

renderer="$1"
inputFile="$2"
readerWidth='90mm'
readerHeight='122mm'
dpi='300'
# zoom='1'
margin='5mm'
papersize='B7'


outputBase="$(echo "${3:-$inputFile}" \
| sed -E -e 's%https?://(www.)?%%' -e 's#[/:.]#_#g' )"

geometry="geometry:papersize={$readerWidth,$readerHeight},top=5mm,right=5mm,bottom=5mm,left=5mm"


declare -A enabled=(
 ["epub"]=true
 ["mobi"]=true
 ["pdflatex"]=true
 ["lualatex"]=true
 ["xelatex"]=true
 ["tectonic"]=true
 ["typst"]=true
 ["wkhtmltopdf"]=true
 ["weasyprint"]=true
 ["context"]=true
 ["wkhtml_custom"]=true
 ["url_to_pdf"]=true
)


# TODO: Integrate https://github.com/ageitgey/node-unfluff

# Epub
if test "$renderer" = "epub" -a "${enabled[epub]}" = true
then
  outputName="$outputBase.epub"
  echo "$inputFile => $outputName"

  pandoc \
    --output "$outputName" \
    "$inputFile"
  echo ""
fi


# Mobi
if test "$renderer" = "mobi" -a "${enabled[mobi]}" = true
then
  outputName="$outputBase.mobi"
  echo "$inputFile => $outputName"

  kindlegen \
    -o "$outputName" \
    "$inputFile"
  echo ""
fi


# Pdflatex
if test "$renderer" = "pdflatex" -a "${enabled[pdflatex]}" = true
then
  outputName="$outputBase.pdflatex.pdf"
  echo "$inputFile => $outputName"

  pandoc \
    --pdf-engine pdflatex \
    --output "$outputName" \
    "$inputFile"
  echo ""
fi


# Lualatex
if test "$renderer" = "lualatex" -a "${enabled[lualatex]}" = true
then
  outputName="$outputBase.lualatex.pdf"
  echo "$inputFile => $outputName"

  pandoc \
    --pdf-engine lualatex \
    --output "$outputName" \
    "$inputFile"
  echo ""
fi


# Xelatex
if test "$renderer" = "xelatex" -a "${enabled[xelatex]}" = true
then
  outputName="$outputBase.xelatex.pdf"
  echo "$inputFile => $outputName"

  pandoc \
    --pdf-engine xelatex \
    --variable "$geometry" \
    --variable 'fontfamily:roboto' \
    --variable 'fontfamilyoptions:rm' \
    --variable 'linestretch:1.1' \
    --css "../configs/pandoc/ebook-reader.css" \
    --output "$outputName" \
    "$inputFile"
  echo ""
fi


# Tectonic
if test "$renderer" = "tectonic" -a "${enabled[tectonic]}" = true
then
  outputName="$outputBase.tectonic.pdf"
  echo "$inputFile => $outputName"

  pandoc \
    --pdf-engine tectonic \
    --variable "$geometry" \
    --variable 'fontfamily:roboto' \
    --variable 'fontfamilyoptions:rm' \
    --variable 'linestretch:1.1' \
    --css "../configs/pandoc/ebook-reader.css" \
    --output "$outputName" \
    "$inputFile"
  echo ""
fi


# Typst
if test "$renderer" = "typst" -a "${enabled[typst]}" = true
then
  outputName="$outputBase.typst.pdf"
  echo "$inputFile => $outputName"

  pandoc \
    --pdf-engine typst \
    --variable "$geometry" \
    --css "../configs/pandoc/ebook-reader.css" \
    --output "$outputName" \
    "$inputFile"
  echo ""
fi


# Wkhtmltopdf
if test "$renderer" = "wkhtmltopdf" -a "${enabled[wkhtmltopdf]}" = true
then
  nameWkhtml="$outputBase.wkhtmltopdf.pdf"
  echo "$inputFile => $nameWkhtml"

  pandoc \
    --pdf-engine wkhtmltopdf \
    --pdf-engine-opt '--lowquality' \
    --css "../configs/pandoc/ebook-reader.css" \
    --output "$nameWkhtml" \
    "$inputFile"
  echo ""
fi


# Weasyprint
if test "$renderer" = "weasyprint" -a "${enabled[weasyprint]}" = true
then
  nameWeasyprint="$outputBase.weasyprint.pdf"
  echo "$inputFile => $nameWeasyprint"

  pandoc \
    --pdf-engine weasyprint \
    --variable "$geometry" \
    --output "$nameWeasyprint" \
    "$inputFile"
  echo ""
fi


# Context
if test "$renderer" = "context" -a "${enabled[context]}" = true
then
  outputName="$outputBase.context.pdf"
  echo "$inputFile => $outputName"

  pandoc \
    --pdf-engine Context \
    --output "$outputName" \
    "$inputFile"
  echo ""
fi


# Pdfroff
if test "$renderer" = "pdfroff" -a "${enabled[pdfroff]}" = true
then
  namePdfroff="$outputBase.pdfroff.pdf"
  echo "$inputFile => $namePdfroff"

  pandoc \
    --pdf-engine pdfroff \
    --output "$namePdfroff" \
    "$inputFile"
  echo ""
fi


# Wkhtml Custom
if test "$renderer" = "wkhtml_custom" -a "${enabled[wkhtml_custom]}" = true
then
  nameCustom="$outputBase.custom.pdf"
  echo "$inputFile => $nameCustom"

  # TODO: Usable after https://github.com/wkhtmltopdf/wkhtmltopdf/issues/3860
  # wkhtmltopdf \
  #   --page-width "$readerWidth" \
  #   --page-height "$readerHeight" \
  #   --dpi "$dpi" \
  #   --zoom "$zoom" \
  #   --margin-top "$margin" \
  #   --margin-right "$margin" \
  #   --margin-bottom "$margin" \
  #   --margin-left "$margin" \
  #   --user-style-sheet ~/dotfiles/configs/pandoc/ebook-reader.css \
  #   "$inputFile" \
  #   "$nameCustom"

    # --print-media-type \
    # --load-error-handling ignore \

  # TODO: Use native dpi after https://github.com/jgm/pandoc/issues/4142 is fixed
  pandoc \
    --pdf-engine "wkhtmltopdf" \
    --pdf-engine-opt "--dpi" \
    --pdf-engine-opt "$dpi" \
    --css ~/dotfiles/configs/pandoc/ebook-reader.css \
    --variable "papersize:$papersize" \
    --variable "margin-top:$margin" \
    --variable "margin-right:$margin" \
    --variable "margin-bottom:$margin" \
    --variable "margin-left:$margin" \
    --output "$nameCustom" \
    "$inputFile"

  echo ""
fi


# URL to PDF
if test "$renderer" = "urltopdf" -a "${enabled[url_to_pdf]}" = true
then
  nameUrlToPdf="$outputBase.urltopdf.pdf"
  echo "$inputFile => $nameUrlToPdf"

  curl \
    --fail \
    --location \
    --output "$nameUrlToPdf" \
    "https://url-to-pdf-api.herokuapp.com/api/render?url=$inputFile&pdf.width=$readerWidth&pdf.height=$readerHeight"
  echo ""
fi
