#!/usr/bin/env -S v -raw-vsh-tmp-prefix _exe_

import flag
import os

fn append_extension(filename string) !string {
	mimetype := os.execute('file --brief --mime-type "${filename}"').output
		.trim_space()

	return match mimetype {
		'application/json' {
			'${filename}.json'
		}
		'application/pdf' {
			'${filename}.pdf'
		}
		'application/x-sqlite3' {
			'${filename}.sqlite'
		}
		'application/vnd.sqlite3' {
			'${filename}.sqlite'
		}
		'application/zip' {
			'${filename}.zip'
		}
		'application/zstd' {
			'${filename}.zst'
		}
		'image/jpeg' {
			'${filename}.jpg'
		}
		'image/png' {
			'${filename}.png'
		}
		'text/csv' {
			'${filename}.csv'
		}
		'text/plain' {
			'${filename}.txt'
		}
		else {
			error('‚ö†Ô∏è Unsupported file type "${mimetype}" for file "${filename}"')
		}
	}
}

fn main() {
	mut fp := flag.new_flag_parser(os.args)
	fp.application('autoname')
	fp.version('v0.0.1')
	fp.description('Add an extension to files without one based on their MIME type')
	fp.limit_free_args_to_at_least(1)!
	fp.skip_executable()

	args := fp.finalize() or {
		eprintln(err)
		println('\n' + fp.usage())
		return
	}

	for file in args {
		if file.contains('.') {
			println("üÜí File '${file}' already has an extension")
			continue
		}

		newname := append_extension(file) or {
			eprintln(err)
			continue
		}

		os.mv(file, newname) or {
			println("üö® Failed to rename '${file}' to '${newname}'")
			continue
		}

		println("‚úÖ Renamed '${file}' to '${newname}'")
	}
}
